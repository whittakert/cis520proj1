
CIS 520 - Programming Project #1

                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@k-state.edu>
Ethan Koch		ethank@ksu.edu
Doug Anjard		danjard@ksu.edu
Taylor Whittaker 	whittakert@ksu.edu

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for
>> the TA, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation,
>> course text, lecture notes, and course staff.


                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to your timer_sleep(),
>> including the effects of the timer interrupt handler.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> other designs that you considered?



             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

(thread.c)
static struct semaphore sema_thread;

The idea was to use sema_thread to synchronize threads without 
dealing with priority donation.

>> B2: Explain the data structure used to track priority donation.

Because priority donation is only a problem with locks, we were going
to implement a semaphore so that whenever a thread needed to wait on 
something, it would become blocked until what it needed was available.
So only threads with available resources would be on the ready list.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

We created the following methods in thread.c

  static struct list_elem *find_pri(int pri);
  static void push_by_pri(struct list_elem *elem, int pri);
  static bool has_higher_pri(int pri);

All threads are added to the ready list with push_by_pri so the ready
list is always sorted, and the first element has the highest priority 
that has been on the list for the longest time. We then simply return
the thread at the front of the list.

push_by_pri will find the first element in the ready list with a lower
priority, and insert ELEM right before the found element. If there are 
no elements in the ready list with a lower priority, then ELEM is 
inserted right before the tail.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

Since the idea was to implement a semaphore, whenever a higher priority
thread needed something a lower priority thread had, the higher priority
thread would be blocked and thus removed from the ready list. If there
were multiple threads with higher priority needing something that a
low priority thread had, all of the higher priority threads would be blocked
until the low priority thread could run until it no longer needed
the resource.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

The lower priority thread calls lock_release() ((or sema_up since we
would use a semaphore)) then the lower priority thread would yield.
After the lower yields, the higher priority threads that were previously
blocked would be returned to the ready list and the highest priority
thread would then start executing.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

A potential race in setting the priority can come from taking too long
to yield after lowering priority. Our implementation avoids this by
checking if we will need to yield before actually changing the priority.

A lock would not help this race because the thread should immediately
yield so another can run.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

We chose this design because we thought it would be simple to implement and
using a semaphore would avoid confusion of priority donation. It is superior
to our other considered designs because it passed more tests and proved
to provide better functionality than other attempted designs.

              ADVANCED SCHEDULER [EXTRA CREDIT]
              =================================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

